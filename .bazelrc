# Copyright 2023 Intrinsic Innovation LLC

# C++ toolchain
# Recommended by https://github.com/bazel-contrib/toolchains_llvm/blob/0.7.2/README.md
build --incompatible_enable_cc_toolchain_resolution
# Strict header dependency check. See https://github.com/bazel-contrib/toolchains_llvm/blob/05f0bc1f4b1b12ad7ce0ad5ef9235a94ff39ff54/README.md#strict-header-deps-linux-only
build --features=layering_check

# Static linking to workaround OpenCV symbol lookup errors: https://github.com/bazelbuild/rules_foreign_cc/issues/1164
build --dynamic_mode=off

# Java toolchain
build --java_runtime_version=remotejdk_11

# Always use the pre-configured toolchain.
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Use C++20.
build --cxxopt='-std=c++20'

# Suppress a flood of warnings from gRPC and Protobuf that breaks logs streaming/GitHub Actions usability.
# At the time of writing we have 12k warnings of this type and ~150 others when doing a full build.
build --cxxopt='-Wno-deprecated-enum-enum-conversion'

# Use a static value for `PATH` and does not inherit `LD_LIBRARY_PATH`. Doesn't let environment
# variables like `PATH` sneak into the build, which can cause massive cache misses when they change.
# Use `--action_env=ENV_VARIABLE` if you want to inherit specific environment variables from the
# client, but note that doing so can prevent cross-user caching if a shared cache is used.
# Docs: https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# Silences spurious warnings like:
# `bazel-out/k8-fastbuild/bin/external/com_github_grpc_grpc/external/com_github_grpc_grpc: warning: directory does not exist`
build --incompatible_generated_protos_in_virtual_imports
build --incompatible_default_to_explicit_init_py

# Set a higher timeout value, just in case.
build --remote_timeout=3600

# Platform flags
# The toolchain container used for execution is defined in the target indicated
# by "extra_execution_platforms", "host_platform" and "platforms".
# More about platforms: https://docs.bazel.build/versions/master/platforms.html
build:linux_x86_64 --extra_execution_platforms=//bazel:linux_x86_64
build:linux_x86_64 --host_platform=//bazel:linux_x86_64
build:linux_x86_64 --platforms=//bazel:linux_x86_64

build:remote       --remote_executor=grpcs://remotebuildexecution.googleapis.com
build:remote_cache --remote_cache=grpcs://remotebuildexecution.googleapis.com

# Enable authentication. This will pick up application default credentials by
# default. You can use --google_credentials=some_file.json to use a service
# account credential instead.
build:remote       --google_default_credentials=true
build:remote_cache --google_default_credentials=true

# RBE builds only support linux_x86_64.
build:remote       --config=linux_x86_64
build:remote_cache --config=linux_x86_64

# Enable absl support in googletest. If this define is set, googletest's default
# main function initializes absl, including the command line flag subsystem.
#
# See https://github.com/google/googletest/issues/2883#issuecomment-647540343
build --define absl=1

# Avoid building grpc with xDS support to reduce build time
build --define=grpc_no_xds=true
