// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.data_logger;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "intrinsic/logging/proto/blob.proto";
import "intrinsic/logging/proto/log_item.proto";

// A batch of LogItems to be sent to the LogDispatcher, to be PUT into storage
// on the cloud.
message PutLogItemsRequest {
  repeated intrinsic_proto.data_logger.LogItem items = 1;

  // The cluster the logs originated from.
  string workcell_name = 2;

  // The organization ID prefixes the bucket that logs are uploaded into.
  string organization_id = 3;
}

message PutLogItemsResponse {
  // The number of log items successfully ingested.
  int32 log_items_ingested = 1;

  // The number of log items dropped.
  int32 log_items_dropped = 2;

  // log items in request == (log_items_ingested + log_items_dropped)
}

// A single blob to be sent to the LogDispatcher, to be PUT into storage
// on the cloud.
message PutBlobRequest {
  Blob blob = 1;

  // The cluster the blob originated from.
  string workcell_name = 2;

  // The organization ID prefixes the bucket that logs are uploaded into.
  string organization_id = 3;

  // The event source of the blob, if any.
  //
  // Used to further prefix the blob ID to prevent collisions between blobs from
  // different event sources.
  string event_source = 4;
}

// ID of a cloud structured log source.
message LogSource {
  string workcell_name = 1;  // The cluster the logs originated from.
  string event_source = 2;
}

// Downsampling options.
message DownsamplingOptions {
  oneof downsampling {
    // Duration in milliseconds between subsequent LogItems.
    uint32 sampling_period_ms = 1;

    // Decimation. Keep every N logs and skip everything else.
    uint32 keep_every_n_items = 2;
  }
}

// A request to load one batch of LogItems into the cloud cache, for later
// retrieval using GetCloudLogItems.
//
// Will return a cache session token to retrieve the LogItems.
message LoadCloudLogItemsRequest {
  message LoadCloudLogItemsQuery {
    LogSource log_source = 1;
    DownsamplingOptions downsampling_options = 2;
  }

  LoadCloudLogItemsQuery load_query = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;

  // Truncate load if any of these parameters are met.
  optional uint32 max_num_items = 4;           // Defaults to 100000.
  optional double max_total_byte_size_mb = 5;  // Cumulative, defaults to 1GB

  // Session is bound to organization ID.
  string organization_id = 6;
}

message LoadCloudLogItemsResponse {
  // Specifies the range of logs that were loaded and can be queried.
  message Metadata {
    LogSource log_source = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;

    uint32 num_items = 4;
    double total_byte_size_mb = 5;
    DownsamplingOptions downsampling_options = 6;
  }

  Metadata metadata = 1;

  string session_token = 2;              // Cache token for session.
  google.protobuf.Timestamp expiry = 3;  // When the logs will be deleted.

  bool truncated = 4;  // True if truncated (from client or server-side limits).
  string truncation_cause = 5;

  bytes cursor = 6;  // Opaque cursor to the first log in range, spanning the
                     // entire load range.
}

message GetCloudLogItemsRequest {
  message GetCloudLogItemsQuery {
    LogSource log_source = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
  }

  oneof query {
    GetCloudLogItemsQuery get_query = 1;
    bytes cursor = 2;  // Generally used for pagination.
  }

  string session_token = 3;

  // Limits for the number of results per page.
  optional uint32 max_num_items = 4;           // Defaults to 10000.
  optional double max_total_byte_size_mb = 5;  // Cumulative, defaults to 25MB

  // Session is bound to organization_id.
  string organization_id = 6;
}

message GetCloudLogItemsResponse {
  message Metadata {
    google.protobuf.Timestamp start_time = 1;
    google.protobuf.Timestamp end_time = 2;
    uint32 num_items = 3;
    double total_byte_size_mb = 4;
  }

  repeated intrinsic_proto.data_logger.LogItem items = 1;

  // Opaque cursor to the next page of results. If empty, no next page exists.
  optional bytes next_page_cursor = 2;

  // Metadata for this page of results.
  Metadata metadata = 3;
}

// Service to relay and dispatch CRUD operations on behalf of users for items
// relating to structured logs.
// (e.g., putting logs, uploading blobs, etc.)
service LogDispatcher {
  // Put one batch of LogItems to the cloud.
  rpc PutLogItems(PutLogItemsRequest) returns (PutLogItemsResponse) {}

  // Put one Blob to the cloud.
  rpc PutBlob(PutBlobRequest) returns (google.protobuf.Empty) {}

  // Load a batch of LogItems into the cloud cache and get a cache token to
  // retrieve the LogItems later.
  rpc LoadCloudLogItems(LoadCloudLogItemsRequest)
      returns (LoadCloudLogItemsResponse) {}

  // Fetch a batch of LogItems loaded with LoadCloudLogItems from the cloud
  // cache.
  rpc GetCloudLogItems(GetCloudLogItemsRequest)
      returns (GetCloudLogItemsResponse) {}
}
