// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.motion_planning;

import "intrinsic/icon/proto/joint_space.proto";
import "intrinsic/world/proto/collision_settings.proto";
import "intrinsic/world/proto/geometric_constraints.proto";

// Defines the context in which error occurred.
// We use this field to create the frontend error messages.
// So removing an error context type can impact or alter the generated error
// message.
message ErrorContext {
  enum Type {
    // Default context is set to UNKNOWN for all errors.
    UNKNOWN = 0;
    // IK error when solution(s) are in collision.
    IK_COLLISION = 1;
    // IK error when no solution(s) are found due to limit violation
    // or outside the reachable envelope.
    IK_NO_SOLUTIONS_FOUND = 2;
    // IK error when using nlopt solver.
    IK_NO_SOLUTIONS_FOUND_W_COLLISION_CHECKING = 3;
    // Error when initial state is in collision.
    INITIAL_STATE_COLLISION = 4;
    // Error when goal state is in collision.
    GOAL_STATE_COLLISION = 5;
    // Error when a joint configuration (state) is in collision.
    STATE_IN_COLLISION = 6;
  }
}

// Defines the errors when multi-segment planning
// Currently we only support error for single segments.
message MotionPipelineError {
  // Used for multi-segment planning.
  repeated MotionPlanningError motion_planning_error = 1;
  string logging_id = 2;
}

// Defines a motion planning error
message MotionPlanningError {
  oneof error {
    // The collision error that is reported for a given geometric constraint/
    // pose.
    CollisionError collision_error = 1;
    IKError ik_error = 2;
  }
  // Segment id represents the segment for which the error was reported.
  // For multiple segments we add the first and last segment ids where
  // the planning failures occurred.
  repeated int32 segment_id = 3;
}

message CollisionError {
  repeated CollisionDebug collision_debug = 1;
  // Collision settings used for the collision checker.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 2;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 3;
}

// Each collision debug message corresponds to a collision check.
message CollisionDebug {
  // Error message reported.
  string error_message = 1;
  // Joint positions for which collision was checked.
  intrinsic_proto.icon.JointVec joint_positions = 2;
  // Left entity for the reported collision.
  string left_entity = 3;
  // Right entity/entities for the reported collision.
  // The number of entities in right entities depends on the type of collision
  // checker that is used. If we use no-merge collision checker, we have only
  // one right entity. If we use the merge collision checker, it probable there
  // are multiple entities.
  string right_entities = 4;
}

message IKError {
  string error_message = 1;
  // Constraint for which the error was reported. This is an optional field that
  // is populated for all IK methods that have access to the object world.
  optional intrinsic_proto.world.geometric_constraints.GeometricConstraint
      constraint = 2;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 3;
}
