// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.motion_planning;

import "intrinsic/icon/proto/joint_space.proto";
import "intrinsic/kinematics/types/joint_limits.proto";
import "intrinsic/math/proto/pose.proto";
import "intrinsic/world/proto/collision_settings.proto";
import "intrinsic/world/proto/geometric_constraints.proto";

// Defines the context in which error occurred.
// We use this field to create the frontend error messages.
// So removing an error context type can impact or alter the generated error
// message.
message ErrorContext {
  enum Type {
    // Default context is set to UNKNOWN for all errors.
    UNKNOWN = 0;
    // IK error when solution(s) are in collision.
    IK_COLLISION = 1;
    // IK error when no solution(s) are found due to limit violation
    // or outside the reachable envelope.
    IK_NO_SOLUTIONS_FOUND = 2;
    // IK error when using nlopt solver.
    IK_NO_SOLUTIONS_FOUND_W_COLLISION_CHECKING = 3;
    // Error when initial state is in collision.
    INITIAL_STATE_COLLISION = 4;
    // Error when goal state is in collision.
    GOAL_STATE_COLLISION = 5;
    // Error when a joint configuration (state) is in collision.
    STATE_IN_COLLISION = 6;
    // Fine Path Error
    FINE_PATH_IK_ERROR = 7;
    // Linear Cartesian Path planner
    LINEAR_CARTESIAN_PATH_PLANNER_ERROR = 8;
    // Traj
    TRAJECTORY_PLANNING_INITIAL_STATE_COLLISION = 9;
    TRAJECTORY_PLANNING_GOAL_STATE_COLLISION = 10;
    TRAJECTORY_PLANNING_STATE_COLLISION = 11;
    // Initial configuration validation
    INITIAL_CONF_VALIDATION = 12;
    // Goal configuration validation
    GOAL_CONF_VALIDATION = 13;
    // Joint configuration validation
    CONF_VALIDATION = 14;
  }
}

// Defines the errors when multi-segment planning
// Currently we only support error for single segments.
message MotionPipelineError {
  // Used for multi-segment planning.
  repeated MotionPlanningError motion_planning_error = 1;
  string logging_id = 2;
}

// Defines a motion planning error
message MotionPlanningError {
  oneof error {
    // The collision error that is reported for a given geometric constraint/
    // pose.
    CollisionError collision_error = 1;
    // IK error reported by the IK solver
    IKError ik_error = 2;
    // FinePathIK error reported during path planning
    FinePathIKError fine_path_ik_error = 4;
    // LinearCartesianMotionPathPlannerError reported during path planning for
    //  cartesian linear motions.
    LinearCartesianMotionPathPlannerError linear_cartesian_path_planning_error =
        5;
    JointLimitError joint_limit_error = 6;
  }
  // Segment id represents the segment for which the error was reported.
  // For multiple segments we add the first and last segment ids where
  // the planning failures occurred.
  repeated int32 segment_id = 3;
}

message CollisionError {
  repeated CollisionDebug collision_debug = 1;
  // Collision settings used for the collision checker.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 2;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 3;
}

// Each collision debug message corresponds to a collision check.
message CollisionDebug {
  // Error message reported.
  string error_message = 1;
  // Joint positions for which collision was checked.
  intrinsic_proto.icon.JointVec joint_positions = 2;
  // Left entity for the reported collision.
  string left_entity = 3;
  // Right entity/entities for the reported collision.
  // The number of entities in right entities depends on the type of collision
  // checker that is used. If we use no-merge collision checker, we have only
  // one right entity. If we use the merge collision checker, it probable there
  // are multiple entities.
  string right_entities = 4;
}

message IKError {
  string error_message = 1;
  // Constraint for which the error was reported. This is an optional field that
  // is populated for all IK methods that have access to the object world.
  optional intrinsic_proto.world.geometric_constraints.GeometricConstraint
      constraint = 2;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 3;
}

// FinePathIKError corresponds to an error that is generated during path
// planning when using the FinePathIK planner which computes the inverse
// kinematics on a finely interpolated Cartesian path. This message holds the
// previous and current IK solution, hint for the IK solution.
// This error also includes the desired base to tip transform and the
// joint limits used as optional fields.
message FinePathIKError {
  string error_message = 1;
  intrinsic_proto.icon.JointVec previous_ik_solution = 2;
  intrinsic_proto.icon.JointVec current_ik_hint = 3;
  intrinsic_proto.icon.JointVec current_ik_solution = 4;
  optional intrinsic_proto.Pose base_t_tip_desired = 5;
  optional intrinsic_proto.JointLimits applied_joint_limits = 6;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 7;
}

// LinearCartesianMotionPathPlannerError corresponds to an error generated
// during path planning when planning for linear cartesian motions. This message
// holds the target joint positions that the planner tries to plan for and the
// final joint positions it was able to reach.
message LinearCartesianMotionPathPlannerError {
  string error_message = 1;
  // Target joint positions that the planner tried to plan to.
  optional intrinsic_proto.icon.JointVec target_joint_positions = 3;
  // Final joint positions where the path planner was able to reach.
  optional intrinsic_proto.icon.JointVec final_joint_positions = 4;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 5;
}

// JointLimitsError corresponds to an error generated when the joint limits
// are violated during planning.
message JointLimitError {
  string error_message = 1;
  // Joint limits that are enforced.
  optional intrinsic_proto.JointLimits joint_limits = 2;
  // Joint positions that violate the joint limits.
  intrinsic_proto.icon.JointVec joint_positions = 3;
  // Allows any additional information regarding context where the error
  // occurs.
  optional ErrorContext.Type error_context = 4;
}
