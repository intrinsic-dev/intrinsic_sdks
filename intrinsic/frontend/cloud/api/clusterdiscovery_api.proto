// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.frontend.v1;



enum SolutionState {
  SOLUTION_STATE_UNSPECIFIED = 0;
  SOLUTION_STATE_NOT_RUNNING = 1;
  SOLUTION_STATE_RUNNING_ON_HW = 2;
  SOLUTION_STATE_RUNNING_IN_SIM = 3;
}

message ClusterDescription {
  // The unique name of the cluster within its project.
  string cluster_name = 1;

  // Can be the same as cluster_name, but there are cases such as minikube
  // systems where the context name is locally always the same.
  string k8s_context = 2;

  // Can be used for grouping clusters for display purposes.
  string region = 3;

  // True if cluster is powerful enough to run a simulated workcell.
  bool can_do_sim = 4;

  // True if cluster can access real hardware.
  bool can_do_real = 5;

  // True if cluster has a GPU.
  bool has_gpu = 6;

  // Name of the currently running solution. Empty if none is running.
  string solution_name = 7;

  // Display name of the currently running solution. Empty if none is running.
  string solution_display_name = 8;

  // State of the running solution. Unspecified if none is running.
  SolutionState solution_state = 9;
}

message ListClusterDescriptionsRequest {
  // Room for filtering options which are currently not provided.
}

message ListClusterDescriptionsResponse {
  // By default, sorted lexicographically by cluster region and cluster name.
  repeated ClusterDescription clusters = 1;
}

service ClusterDiscoveryService {
  // Auth annotations for consumption by the following helm_chart:
  //   cs/symbol://intrinsic/frontend/cloud:frontend
  
  
  

  // Returns a list of clusters registered to the org provided via context.
  // If no org is provided, the defaultorg will be used.
  // In multi-tenant projects, this is an empty org, and no cluster will be
  // returned.
  rpc ListClusterDescriptions(ListClusterDescriptionsRequest)
      returns (ListClusterDescriptionsResponse) {}
}
