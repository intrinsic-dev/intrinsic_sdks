{{/*
Copyright 2023 Intrinsic Innovation LLC
*/ -}}

#include "{{.SkillNameSnakeCase}}.h"

#include <memory>
#include <string>

#include "absl/container/flat_hash_map.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "{{strJoin .BazelPackage "/"}}{{if .BazelPackage}}/{{end}}{{.SkillNameSnakeCase}}.pb.h"
#include "google/protobuf/message.h"
#include "intrinsic/icon/release/status_helpers.h"
#include "intrinsic/skills/cc/skill_utils.h"

{{- /* Don't use a namespace when creating a skill adjacent to WORKSPACE because
it will be an anonymous namespace. It would prevent CreateSkill from being
callable from outside this translation unit. */}}
{{if .BazelPackage }}
namespace {{strJoin .BazelPackage "::"}} {
{{end}}
using ::{{strJoin .ProtoPackage "::"}}::{{.SkillNameUpperCamelCase}}Params;

using ::intrinsic::skills::ExecuteContext;
using ::intrinsic::skills::ExecuteRequest;
using ::intrinsic::skills::SkillInterface;
using ::intrinsic::skills::SkillProjectInterface;

// -----------------------------------------------------------------------------
// Skill signature.
// -----------------------------------------------------------------------------

std::unique_ptr<SkillInterface> {{.SkillNameUpperCamelCase}}::CreateSkill() {
  return std::make_unique<{{.SkillNameUpperCamelCase}}>();
}

// -----------------------------------------------------------------------------
// Skill execute.
// -----------------------------------------------------------------------------

absl::StatusOr<std::unique_ptr<google::protobuf::Message>> {{.SkillNameUpperCamelCase}}::Execute(
    const ExecuteRequest& request, ExecuteContext& context) {
  
  // Get parameters.
  INTRINSIC_ASSIGN_OR_RETURN(
      auto params, request.params<{{.SkillNameUpperCamelCase}}Params>());

  // Log the text provided.
  LOG(INFO) << params.text();

  return nullptr;
}
{{if .BazelPackage }}
}  // namespace {{strJoin .BazelPackage "::"}}
{{- end}}