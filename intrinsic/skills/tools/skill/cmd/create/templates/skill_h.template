{{/*
Copyright 2023 Intrinsic Innovation LLC
*/ -}}

#ifndef {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_
#define {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_

#include <memory>
#include <string>
#include <utility>

#include "absl/container/flat_hash_map.h"
#include "absl/status/statusor.h"
#include "google/protobuf/message.h"
#include "intrinsic/skills/cc/skill_interface.h"

{{- /* Don't use a namespace when creating a skill adjacent to WORKSPACE because
it will be an anonymous namespace. It would prevent CreateSkill from being
callable from outside this translation unit. */}}
{{if .BazelPackage}}
namespace {{strJoin .BazelPackage "::"}} {
{{end}}
class {{.SkillNameUpperCamelCase}} : public intrinsic::skills::SkillInterface {
 public:
  // ---------------------------------------------------------------------------
  // Skill signature (see intrinsic::skills::SkillSignatureInterface)
  // ---------------------------------------------------------------------------

  // Factory method to create an instance of the skill.
  static std::unique_ptr<intrinsic::skills::SkillInterface> CreateSkill();

  // ---------------------------------------------------------------------------
  // Skill execution (see intrinsic::skills::SkillExecuteInterface)
  // ---------------------------------------------------------------------------

  // Called once each time the skill is executed in a process.
  absl::StatusOr<std::unique_ptr<google::protobuf::Message>>
  Execute(const intrinsic::skills::ExecuteRequest& request,
          intrinsic::skills::ExecuteContext& context) override;
};
{{if .BazelPackage }}
}  // namespace {{strJoin .BazelPackage "::"}}
{{end}}
#endif  // {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_
