# Copyright 2023 Intrinsic Innovation LLC
# Intrinsic Proprietary and Confidential
# Provided subject to written agreement between the parties.

"""Implementation of default handling for python Skills."""

import typing

from google.protobuf import any_pb2
from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import message_factory
from intrinsic.skills.internal import error_bindings
from pybind11_abseil import status


def _one_ofs_set(
    field_descriptors: typing.Iterable[descriptor.FieldDescriptor],
) -> typing.Set[descriptor.FieldDescriptor]:
  """Returns a set of the oneofs that have been set in the msg."""
  one_ofs_set = set()
  for field in field_descriptors:
    if (
        field.containing_oneof is not None
        and field.containing_oneof not in one_ofs_set
    ):
      one_ofs_set.add(field.containing_oneof)
  return one_ofs_set


def _set_fields(
    fields: typing.Dict[descriptor.FieldDescriptor, typing.Any],
    msg: message.Message,
):
  """Sets the fields in msg to the values contained in fields.

  Args:
    fields: A dictionary of fields to set.
    msg: A protobuf message to mutate
  """
  for field, value in fields.items():
    if field.label == descriptor.FieldDescriptor.LABEL_REPEATED:
      repeated = getattr(msg, field.name)
      repeated.extend(value)
    elif field.message_type is not None:
      submessage = getattr(msg, field.name)
      submessage.CopyFrom(value)
    else:
      setattr(msg, field.name, value)


def merge_unset(from_msg: message.Message, to_msg: message.Message):
  """Merges from_msg into to_msg.

  Only merges fields that aren't present in to_msg, excludes fields in a oneof
  for which a different field in the same oneof is set.

  Args:
    from_msg: Provides a set of default values.
    to_msg: Is modified by merging fields from from_msg.

  Raises:
    Raises a ValueError if from_msg and to_msg do not have matching descriptors.
  """
  if from_msg.DESCRIPTOR != to_msg.DESCRIPTOR:
    raise ValueError(
        '`from_msg` and `to_msg` must have the same descriptor (same type of'
        'message). If you believe these are messages of the same type, but are'
        'seeing this error, check that the messages were generated by the same'
        'message pool.'
    )

  to_fields = to_msg.ListFields()
  from_fields = from_msg.ListFields()

  to_field_set_oneofs = _one_ofs_set([field for field, _ in to_fields])

  to_fields_set = set([field for field, _ in to_fields])
  fields_set_in_from_but_not_to = {}

  for field, value in from_fields:
    # Don't overwrite oneof fields of which a different member of the oneof is
    # set.
    if field in to_fields_set or (
        field.containing_oneof is not None
        and field.containing_oneof in to_field_set_oneofs
    ):
      continue
    fields_set_in_from_but_not_to[field] = value

  _set_fields(fields_set_in_from_but_not_to, to_msg)


def apply_defaults_to_parameters(
    msg_descriptor: descriptor.Descriptor,
    default_value_any: any_pb2.Any,
    parameters_any: any_pb2.Any,
):
  """Extracts the parameters, then applies defaults to parameters.

  Args:
    msg_descriptor: The type information for the expected parameter and default
      message type.
    default_value_any: The defaults to apply to the parameters.
    parameters_any: Original parameters are extracted from here, defaults are
      applied, then repacked into this arg.

  Raises:
    status.StatusNotOk if the parameters or defaults are of an unexpected type.
  """
  cls = message_factory.GetMessageClass(descriptor=msg_descriptor)

  defaults = cls()
  if not default_value_any.Unpack(defaults):
    error_bindings.raise_status(
        status.StatusCode.INVALID_ARGUMENT,
        'Unexpected default type. Expected: {}. Got: {}'.format(
            msg_descriptor.full_name, default_value_any.TypeName()
        ),
    )

  parameters = cls()
  if not parameters_any.Unpack(parameters):
    error_bindings.raise_status(
        status.StatusCode.INVALID_ARGUMENT,
        'Unexpected parameter type. Expected: {}. Got: {}'.format(
            msg_descriptor.full_name, parameters_any.TypeName()
        ),
    )

  merge_unset(defaults, parameters)
  parameters_any.Pack(parameters)
