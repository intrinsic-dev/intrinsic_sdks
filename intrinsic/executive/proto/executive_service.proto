// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.executive;

import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "intrinsic/executive/proto/behavior_tree.proto";
import "intrinsic/executive/proto/executive_execution_mode.proto";
import "intrinsic/executive/proto/run_metadata.proto";

// The Executive is responsible for executing and monitoring Behavior Trees.
//
// Given the declarative description in the form of a behavior tree, the
// Executive executes the tree according to the defined semantics, for example
// by executing one child after the other for a sequence node. As part of the
// execution it invokes skills according to the skill API contract.
//
// Key concepts of the executive:
// - Behavior Tree: declarative behavior specification to define a process.
// - Blackboard: an internal key-value store for data flow.
// - Operation: the operational envelope for one Behavior Tree.
//
// The concept of an operation is central to the Executive Service API: by
// creating an operation a behavior tree is loaded. Then the operation
// is the reference item to start, suspend, resume. The operation and in
// turn the Behavior Tree it encloses.
// Note: at this point in time there can be at most one operation. Creating a
// second operation fails, even if the previous operation was completed. It
// must be deleted (and possibly stopped if still active) before creating
// another one.
service ExecutiveService {

  // ========= Methods for operations (tied to a Behavior Tree) =============

  // An operation manages the lifecycle of a Behavior Tree. It is the
  // operational envelope. It is identified by a unique name. The operation name
  // changes for every operation, cannot be reused, and is independent of any
  // Behavior Tree ID or name. Treat it as an opaque random string.
  //
  // Operations follow the log-running operations specification in
  // https://google.aip.dev/151.
  //
  // At this time, the executive only supports a single active operation. The
  // operation's metadata is crucial to understanding the state fully. The done
  // flag in the Operation message only denotes whether the associated
  // Behavior Tree is in a TERMINAL state (see below).
  //
  // NOTE: Below, we use the following labels to refer to conjunctions of
  // behavior tree states:
  //  CANCELLABLE := RUNNING | SUSPENDING | SUSPENDED
  //  WAITING := ACCEPTED | SUSPENDED | FAILED | SUCCEEDED | CANCELLED
  //  TERMINAL := SUCCEEDED | FAILED | CANCELLED

  // Loads a behavior tree. Calling this while an operation already exists will
  // result in an error.
  rpc CreateOperation(CreateOperationRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      response_type: "RunResponse"
      metadata_type: "RunMetadata"
    };
    option (google.api.http) = {
      put: "/api/executive/operations"
      body: "*"
    };
  }

  // Lists all active operations.
  rpc ListOperations(google.longrunning.ListOperationsRequest)
      returns (google.longrunning.ListOperationsResponse) {
    option (google.api.http) = {
      get: "/api/executive/operations"
    };
  }

  // Get a particular operation by name.
  // The returned operation can be used to:
  // - check whether it has completed (the `done` field will be true)
  // - access the result when done done (`error` or `response` field set)
  // - inspect the detailed state in the operation's metadata.
  rpc GetOperation(google.longrunning.GetOperationRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      get: "/api/executive/operations/{name}"
    };
  }

  // Get a particular operation's metadata by operation name.
  rpc GetOperationMetadata(GetOperationMetadataRequest) returns (RunMetadata) {
    option (google.api.http) = {
      get: "/api/executive/operations/{name}:metadata"
    };
  }

  // Get a particular operation by name with configurable metadata.
  rpc GetOperationView(GetOperationViewRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      get: "/api/executive/operations/{name}"
    };
  }

  // Deletes an operation. This method indicates that the client is no longer
  // interested in the operation result. It does not cancel the operation. This
  // returns an error if the operation's behavior tree is not in a WAITING
  // state.
  rpc DeleteOperation(google.longrunning.DeleteOperationRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/executive/operations/{name}"
    };
  }

  // Starts the operation and thus the execution of its behavior tree. Only
  // valid if the behavior tree is in the ACCEPTED state.
  rpc StartOperation(StartOperationRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/api/executive/operations/{name}:start"
      body: "*"
    };
  }

  // Starts asynchronous cancellation on a long-running operation. Clients can
  // use GetOperation to check whether the cancellation succeeded or whether the
  // operation completed despite cancellation. On successful cancellation, the
  // operation is not deleted; instead, it becomes an operation with an
  // [Operation.error][] value with a [google.rpc.Status.code][] of 1,
  // corresponding to `Code.CANCELLED`.
  //
  // Returns an error if the behavior tree is not in a cancellable state.
  rpc CancelOperation(google.longrunning.CancelOperationRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/executive/operations/{name}:cancel"
    };
  }

  // Waits until the specified operation is done (SUCCEEDED, FAILED, or
  // CANCELLED) or reaches at most a specified timeout, returning the latest
  // state. If the operation is already done, the latest state is immediately
  // returned. If the timeout specified is greater than the default HTTP/RPC
  // timeout, the HTTP/RPC timeout is used. The default timeout is 60 minutes.
  // Note that this method is on a best-effort basis. It may return the latest
  // state before the specified timeout (including immediately), meaning even an
  // immediate response is no indicator that the operation is done.
  rpc WaitOperation(google.longrunning.WaitOperationRequest)
      returns (google.longrunning.Operation) {}

  // Suspends an operation by waiting for active skills to finish and then
  // pausing execution of the remainder of the behavior tree. The method will
  // return immediately and doesn't wait for the tree to be fully suspended
  // (use GetOperation to see the operation's behavior tree state).
  //
  // Returns an error if the behavior tree is not RUNNING.
  rpc SuspendOperation(SuspendOperationRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/executive/operations/{name}:suspend"
    };
  }

  // Resumes an operation by resuming its behavior tree. Returns an error if
  // called when the behavior tree is not in the SUSPENDED state. This method
  // returns immediately and does not wait for the tree to be fully resumed
  // (use GetOperation to see the operation's behavior tree state).
  rpc ResumeOperation(ResumeOperationRequest)
      returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/api/executive/operations/{name}:resume"
      body: "*"
    };
  }

  // Resets an operation and its associated behavior tree. This resets the
  // behavior tree to a state as if it had just been created.
  //
  // Returns an error if the behavior tree is not in a WAITING state.
  rpc ResetOperation(ResetOperationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/executive/operations/{name}:reset"
    };
  }

  // ========= Methods for breakpoints (on a specific behavior tree) ===========

  // Breakpoints are a means to request automatically suspending a tree at
  // specific points of the Behavior Tree. They can be embedded directly in
  // Behavior Tree's nodes' decorators or added at run-time for a particular
  // operation's Behavior Tree.

  // Creates a new breakpoint on the given operation's loaded behavior tree.
  rpc CreateBreakpoint(CreateBreakpointRequest)
      returns (BehaviorTree.Breakpoint) {}

  // Deletes a breakpoint from the given operation's behavior tree.
  rpc DeleteBreakpoint(DeleteBreakpointRequest)
      returns (google.protobuf.Empty) {}

  // Deletes all breakpoints of the loaded behavior tree.
  rpc DeleteAllBreakpoints(DeleteAllBreakpointsRequest)
      returns (google.protobuf.Empty) {}

  // Get a list of all breakpoints set on the loaded behavior tree.
  // The information is the same as presented through decorators in the
  // behavior tree in the state proto retrieved using GetOperation or
  // GetOperationView.
  rpc ListBreakpoints(ListBreakpointsRequest)
      returns (ListBreakpointsResponse) {}

  // ========= Methods for Node Execution (on a specific behavior tree) ========

  // Updates the current execution settings for a node.
  rpc SetNodeExecutionSettings(SetNodeExecutionSettingsRequest)
      returns (SetNodeExecutionSettingsResponse) {}
}

message CreateOperationRequest {
  // New runnable to load. If default_plan is set to true, the default plan of
  // the executive (configured at startup) is created. Error if unset.
  oneof runnable_type {
    // The behavior tree to create the operation for
    BehaviorTree behavior_tree = 1;
    // If set to true, will load the default process specified for the solution.
    bool use_default_plan = 2;
  }
}

message ResetOperationRequest {
  // Name of the operation
  string name = 1;
  // If set to true, the blackboard of the operation will not be reset and all
  // keys are kept.
  bool keep_blackboard = 2;
}

message GetOperationViewRequest {
  // Name of the operation
  string name = 1;

  // Some presets to simplify querying from frontend.
  enum View {
    // Full view, corresponds to "no fieldmask"
    VIEW_DEFAULT = 0;
    // Only report state, not runnable (behavior tree).
    VIEW_STATE_ONLY = 1;
  }

  oneof view_type {
    // The following enables to limit the data that is returned in the
    // operation's metadata field (of type RunMetadata in the Any proto). If not
    // set returns the full metadata. A typical limited mask could be "paths:
    // behavior_tree.state" to get only the behavior tree's overall state. If
    // this is set to an empty FieldMask (nothing in FieldMask.paths), the
    // metadata field will not be filled.
    google.protobuf.FieldMask metadata_fieldmask = 2;
    // Use a predefined view.
    View view = 3;
  }
}

message GetOperationMetadataRequest {
  // Name of the operation
  string name = 1;
}

message StartOperationRequest {
  // Name of the operation
  string name = 1;

  ExecutionMode execution_mode = 2;
  SimulationMode simulation_mode = 3;

  RunMetadata.TracingInfo.SkillTraceHandling skill_trace_handling = 4;

  // Optionally select a specific node in the operation to be executed
  // instead of the full tree.
  // start_node_id must be in start_tree_id and start_tree_id must be part of
  // the named operation. start_node_id will be executed as if it were the root
  // of start_tree_id and as if start_tree_id were the process tree of the
  // operation. No other parts of the tree will be executed.
  optional string start_tree_id = 5;
  // The respective start_node_id to start (see start_tree_id).
  optional uint32 start_node_id = 6;
}

message SuspendOperationRequest {
  // Name of the operation
  string name = 1;
}

message ResumeOperationRequest {
  enum ResumeMode {
    // As if the field was not set, see below.
    RESUME_MODE_UNSPECIFIED = 0;

    // Set execution mode to normal and resume
    CONTINUE = 1;

    // Take a step and select the next node. Only valid in step-wise mode.
    STEP = 2;

    // Mark sub-trees of node that caused last step-wise suspend to not trigger
    // a suspend and continue execution. First non-marked node triggers a
    // suspend again. Only valid in step-wise mode.
    NEXT = 3;
  }

  // Name of the operation
  string name = 1;
  optional ResumeMode mode = 2;
}

message CreateBreakpointRequest {
  // Name of the operation
  string name = 1;
  BehaviorTree.Breakpoint breakpoint = 2;
}

message DeleteBreakpointRequest {
  // Name of the operation
  string name = 1;
  BehaviorTree.Breakpoint breakpoint = 2;
}

message DeleteAllBreakpointsRequest {
  // Name of the operation
  string name = 1;
}

message ListBreakpointsRequest {
  // Name of the operation
  string name = 1;
}
message ListBreakpointsResponse {
  repeated BehaviorTree.Breakpoint breakpoints = 1;
}

message SetNodeExecutionSettingsRequest {
  // Name of the operation
  string name = 1;

  // tree_id and node_id identify the node to change settings for.
  // tree_id and node_id must be in the operation identified by name and
  // node_id must be in the tree identified by tree_id.
  string tree_id = 2;
  // The respective node_id to set (see tree_id).
  uint32 node_id = 3;
  // New settings to apply for this node.
  BehaviorTree.Node.ExecutionSettings execution_settings = 4;
}
message SetNodeExecutionSettingsResponse {}
