// Copyright 2023 Intrinsic Innovation LLC
// Intrinsic Proprietary and Confidential
// Provided subject to written agreement between the parties.

syntax = "proto3";

package intrinsic_proto.icon;

import "intrinsic/icon/control/parts/hal/hal_part_config.proto";
import "intrinsic/icon/control/parts/mode_of_safe_operation_limits_config.proto";
import "intrinsic/icon/proto/cart_space.proto";
import "intrinsic/icon/proto/joint_position_pid_torque_controller_config.proto";
import "intrinsic/icon/proto/linear_joint_acceleration_filter_config.proto";

// Config for a HAL part.
// The config contains a list of hardware interfaces from various hardware
// modules which the HAL part should claim.
// This is currently not yet being used as such due to a step-wise migration,
// but ought be sufficiently complete once actions refer to hardware interfaces
// directly.
// message HalPartConfig {
//   // List of hardware interfaces to be claimed.
//   repeated HardwareInterface interfaces = 1;
// }

// Config specialization for a HAL arm part.
// The config is assigning a hardware interface for each required feature
// interface.
message HalArmPartConfig {
  HardwareInterface joint_position_command = 1;
  HardwareInterface joint_velocity_command = 2;
  HardwareInterface joint_torque_command = 3;
  HardwareInterface joint_position_state = 4;
  HardwareInterface joint_velocity_state = 5;
  HardwareInterface joint_acceleration_state = 6;
  HardwareInterface joint_torque_state = 7;
  HardwareInterface process_wrench_command = 18;
  // If present, extract limits from a RobotCollection in WorldService instead
  // of reading them from a hardware module.
  // This name must match a unique local name or global alias of a
  // RobotCollection in the World.
  //
  // This is the name you see for a robot in Flowstate's scene tree, or
  // in a set_alias block in a world_updates file (see
  // intrinsic/apps/mh12/world/world_updates_mh12.pbtxt;l=19;rcl=536811668
  // for an example).
  // When looking at world_updates files, remember to look at the file for your
  // _application_, not for the base robot resource type.
  //
  // If omitted, the HalArmPart does not offer the Dynamics Feature
  // Interface.
  optional string world_robot_collection_name = 17;
  intrinsic_proto.icon.CartesianLimits cartesian_limits = 9;

  // If present, the kinematics model name needs to correspond to one of the
  // kinematics models available via KinematicsService. Which models are
  // available is determined by <part_description> tags in machine.xml for
  // KinematicsServiceImpl, and the robot models available in the (ICON)
  // WorldService for KinematicsFromWorldService.
  //
  // If omitted, the HalArmPart does not offer the ManipulatorKinematics Feature
  // Interface.
  optional string kinematics_model_name = 10;

  // If present, the dynamics model name needs to correspond to one of the
  // dynamics models available via DynamicsService. Which models are
  // available is determined by <part_description> tags in machine.xml for
  // DynamicsServiceImpl, and the robot models available in the (ICON)
  // WorldService, KinematicsFromWorldService and subsequently
  // DynamicsFromKinematicsService.
  //
  // If omitted, the HalArmPart does not offer the Dynamics Feature
  // Interface.
  optional string dynamics_model_name = 11;

  // If present, create an estimated acceleration state feature interface.
  //   Preconditions:
  // * `joint_position_state` hardware interface is available
  // * `joint_velocity_state` hardware interface is available
  // * `joint_acceleration_state` hardware interface is *not* available
  optional intrinsic_proto.icon.LinearJointAccelerationFilterConfig
      linear_joint_acceleration_filter_config = 12;

  // If present, register a joint position command feature interface. This is
  // mapped to the `joint_torque_command` hardware interface via a per-joint
  // control law parameterized by the config specified here.
  //  Preconditions:
  // * `joint_torque_command` hardware interface is available
  // * `joint_position_state` hardware interface is available
  // * `joint_velocity_state` hardware interface is available
  // * `joint_position_command` hardware interface is *not* available
  optional intrinsic_proto.icon.ArmPositionPidTorqueControllerConfig
      arm_position_pid_torque_controller_config = 13;

  // If present, and `true` then the part will be configured to perform self
  // collision checking. This requires the availability of a WorldService and
  // AssemblyService configured in the machine.xml.
  optional bool check_collisions = 14;

  // If present this configuration determines modified limits (joint and
  // Cartesian), which are to be used under specific modes of safe operation as
  // determined by the part SafetyStatus. Otherwise the limits determined from
  // the hardware interfaces will be used for all modes of operation.
  optional ModeOfSafeOperationLimitsConfig
      mode_of_safe_operation_limits_config = 15;

  // If present, then the joint velocity state feature interface velocity
  // measurement values will be low-pass filtered using a 2nd Order Butterworth
  // filter with the configured cutoff frequency.
  optional double velocity_filter_cutoff_frequency = 16;
}
