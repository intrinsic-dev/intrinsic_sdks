// Copyright 2023 Intrinsic Innovation LLC
// Intrinsic Proprietary and Confidential
// Provided subject to written agreement between the parties.

syntax = "proto3";

package intrinsic_proto.icon;

import "google/protobuf/timestamp.proto";

message CoeEntry {
  // CoE index.
  uint32 index = 1;
  // CoE subindex.
  uint32 subindex = 2;
  string name = 3;
  string description = 4;
  oneof value {
    bool bool_value = 5;
    uint32 byte_value = 6;
    uint32 word_value = 7;
    uint32 dword_value = 8;
    int32 sint_value = 9;
    int32 int_value = 10;
    int32 dint_value = 11;
    int64 lint_value = 12;
    uint32 usint_value = 13;
    uint32 uint_value = 14;
    uint32 udint_value = 15;
    uint64 ulint_value = 16;
    float real_value = 17;
    double lreal_value = 18;
    string string_value = 19;
  }
}

message CoeEntries {
  repeated CoeEntry coe_entries = 1;
}

message CoeEntryWithTimestamp {
  // The time when the CoEEntry was received.
  google.protobuf.Timestamp timestamp = 1;
  CoeEntry coe_entry = 2;
}

message CoePublisherMessage {
  message ExportData {
    repeated CoeEntryWithTimestamp coe_entries = 1;
  }
  // The ExportData of every device.
  map<string, ExportData> values = 1;
}

// DiagnosisMessage based on ETG.1020, chapter 13 “Diagnosis handling”.
message DiagnosisMessage {
  enum Flags {
    UNKNOWN = 0;
    INFO = 1;
    WARNING = 2;
    ERROR = 3;
  }
  Flags flag = 1;
  // Diag Code (4 bytes)
  uint32 diag_code = 2;
  // EtherCAT timestamp adjusted to UNIX time.
  // EtherCAT uses the Universal zero point [1.1.2000 00:00].
  // UNIX uses [1.1.1970 00:00].
  google.protobuf.Timestamp timestamp = 3;
  // Unadjusted EtherCAT timestamp as read from the device.
  // Timestamp (8-byte, local slave time or 64-bit Distributed Clock time, if
  // available)
  uint64 timestamp_raw_ns = 4;
  // Text ID  (2 bytes) - Used to lookup the textual description.
  uint32 text_id = 5;
  // The message string corresponding to `text_id`. Empty if the lookup fails.
  // The message texts need to be configured for each acontis_ecat
  // device, because Acontis Ec Master does not provide them.
  string text = 6;
  message CustomParameters {
    uint32 flags = 1;
    bytes data = 2;
  }
  // Dynamic parameters added by the firmware.
  CustomParameters custom_parameters = 7;
}

message DiagnosisPublisherMessage {
  message DiagnosisMessages {
    repeated DiagnosisMessage diagnosis_messages = 1;
  }
  // The DiagnosisMessages of every device.
  map<string, DiagnosisMessages> diagnosis_messages_by_device_name = 1;
}

// The vendor specific DiagMessage texts, as Acontis Ec Master does not provide
// them.
message DiagnosisMessageTexts {
  // Maps DiagnosisMessage::text_id to human readable text.
  map<uint32, string> diagnosis_message_texts_by_text_id = 1;
}
