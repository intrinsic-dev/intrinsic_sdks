// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

// This file defines the ICON Application Layer GRPC service.
//
// Most users should *not* interact with this service directly, but rather use
// one of the client libraries:
//
// * C++: intrinsic/icon/cc_client/
// * Python: intrinsic/icon/python/
// * Golang: intrinsic/icon/go/

package intrinsic_proto.icon;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "intrinsic/icon/proto/joint_space.proto";
import "intrinsic/icon/proto/logging_mode.proto";
import "intrinsic/icon/proto/part_status.proto";
import "intrinsic/icon/proto/safety_status.proto";
import "intrinsic/icon/proto/streaming_output.proto";
import "intrinsic/icon/proto/types.proto";
import "intrinsic/logging/proto/context.proto";
import "intrinsic/world/proto/robot_payload.proto";

// GetActionSignatureByName() request.
message GetActionSignatureByNameRequest {
  // Action type name, e.g. "xfa.joint_move".
  string name = 1;
}
// GetActionSignatureByName() response.
message GetActionSignatureByNameResponse {
  // Description of the action type, or unset if the action type name is not
  // found.
  ActionSignature action_signature = 1;
}

// GetConfig() request.
message GetConfigRequest {}
// GetConfig() response.
message GetConfigResponse {
  // Static (for the duration of the ICON server's lifetime) data about the
  // parts on this server.
  repeated PartConfig part_configs = 1;

  // This is the frequency at which ICON's control loop is running.
  double control_frequency_hz = 2;
  ServerConfig server_config = 3;
}

// GetStatus() request.
message GetStatusRequest {}
// GetStatus() response.
message GetStatusResponse {
  message SessionStatus {
    // The Parts claimed by this Session for write access. No other Session can
    // claim any of the Parts in this group.
    PartGroup part_group = 1;
    // A list of the actions in this Session. Note that this includes *all*
    // actions that a user has added and not removed. In particular, the list is
    // not limited to the *running* actions.
    repeated int64 action_ids = 2;
  }
  // The current status (i.e. dynamic data, as opposed to the static data in
  // `PartConfig`) for all Parts on this server.
  map<string, intrinsic_proto.icon.PartStatus> part_status = 1;
  // Information about all currently active Sessions.
  map<uint64, SessionStatus> sessions = 2;
  // The current speed override value, see SetSpeedOverride for more details.
  double current_speed_override = 3;
  // The current status of the safety system.
  intrinsic_proto.icon.SafetyStatus safety_status = 4;
}

message SetSpeedOverrideRequest {
  // Must be between 0 and 1, and modifies the execution speed of compatible
  // actions.
  double override_factor = 1;
}

message SetSpeedOverrideResponse {}

message GetSpeedOverrideRequest {}

message GetSpeedOverrideResponse {
  double override_factor = 1;
}

message SetLoggingModeRequest {
  LoggingMode logging_mode = 1;
}

message SetLoggingModeResponse {}

message GetLoggingModeRequest {}

message GetLoggingModeResponse {
  LoggingMode logging_mode = 1;
}

// IsActionCompatible() request.
message IsActionCompatibleRequest {
  // Action type to check for compatibility.
  string action_type_name = 1;
  oneof slot_data {
    // If this is set, ICON checks for compatibility with this exact SlotPartMap
    // (i.e. specific parts assigned to specific slots of `action_type_name`).
    SlotPartMap slot_part_map = 3;
    // If this is set, ICON checks whether `part_name` is compatible with *any*
    // of the slots for `action_type_name`.
    string part_name = 4;
  }
  reserved 2;
  reserved "parts";
}
// IsActionCompatible() response.
message IsActionCompatibleResponse {
  // True iff the action type named `action_type_name` is compatible with the
  // part or SlotPartMap from the request.
  bool is_compatible = 1;
}

// ListActionSignatures() request.
message ListActionSignaturesRequest {}
// ListActionSignatures() response.
message ListActionSignaturesResponse {
  // List of available action types.
  repeated ActionSignature action_signatures = 1;
}

// ListCompatibleParts() request.
message ListCompatiblePartsRequest {
  // List of action types to get compatible parts for. A part is considered
  // compatible if it is compatible with at least one slot of every action type
  // in the list.
  repeated string action_type_names = 1;
}
// ListCompatibleParts() response.
message ListCompatiblePartsResponse {
  // Parts that are compatible with all listed `action_type_names`.
  repeated string parts = 1;
}

// ListParts() request.
message ListPartsRequest {}
// ListParts() response.
message ListPartsResponse {
  // Parts that are available.
  repeated string parts = 1;
}

// OpenSession() request. It is valid to send `initial_session_data`, an
// ActionRequest, and a `start_actions_request` all in the same
// OpenSessionRequest. These fields will always be evaluated in the
// following order:
// 1) `initial_session_data`
// 2) ActionRequest's are applied
// 3) `start_actions_request`
// Evaluation is stopped at the first error encountered. For example, if there
// is an error in the ActionRequest, `start_actions_request` will not be
// applied.
message OpenSessionRequest {
  message InitialSessionData {
    // A list of parts to allocate for this session. Parts that are in use by
    // one session cannot be allocated by any other sessions until they are
    // freed. All parts allocated by a session are freed when the session ends.
    PartList allocate_parts = 1;
    // If ICON cannot open the session by this deadline, it returns an error.
    google.protobuf.Timestamp deadline = 2;
  }
  // Initial data for opening a session that must be sent *only* with the first
  // OpenSessionRequest.
  //
  // That is, ICON closes the session and returns an error if
  // * the first OpenSessionRequest for a session *lacks* `initial_session_data`
  // * any OpenSessionRequest *but* the first contains `initial_session_data`
  InitialSessionData initial_session_data = 1;

  message ClearAllActions {}

  oneof action_request {
    // ICON adds the actions and reactions in the ActionsAndReactions to the
    // existing action state machine on the server.
    //
    // Adding actions and reactions is a transaction and can have one of two
    // results:
    // 1. Success: The action state machine now contains all of the new actions
    //             and reactions
    // 2. Failure: The action state machine contains the same actions and
    //             reactions as before, and ICON returns an error
    //
    // Examples of problems that can cause a failure:
    // * Any action_instance_id or reaction_instance_id in the
    //   ActionsAndReactions proto is already in use
    // * Any Reaction refers to an action_instance_id that is not present in
    //   either the existing action state machine or the ActionsAndReactions
    //   proto
    ActionsAndReactions add_actions_and_reactions = 5;
    // ICON removes the actions and reactions in the ActionAndReactionIds proto
    // from the action state machine on the server.
    //
    // If any action id or reaction ID in the ActionAndReactionIds proto does
    // not exist, then ICON does not modify the action state machine and returns
    // an error.
    ActionAndReactionIds remove_action_and_reaction_ids = 6;
    // ICON removes all existing actions and reactions. If any action is
    // currently running, ICON stops that action.
    // After this, the safety action is active for all parts.
    ClearAllActions clear_all_actions_reactions = 7;
  }

  // Configuration needed when starting a set of actions.
  message StartActionsRequestData {
    // Actions to start. Those actions must not have overlapping part sets.
    repeated int64 action_instance_ids = 1;
    // If true, ICON stops all active actions before starting the actions in
    // `action_instance_ids` (if any). This means callers can use this flag with
    // an empty `action_instance_ids` to stop all actions.
    //
    // If false, all active actions continue to run, unless one of the actions
    // in `action_instance_ids` uses an overlapping set of parts. In that case,
    // the newly-started action takes precedence, and ICON stops the action that
    // was using the same parts before.
    bool stop_active_actions = 2;
  }

  // If present, ICON starts the requested action instances.
  // Note that this is truly optional, and multiple requests over the course of
  // a single session can start actions. For example, a client may wish to start
  // a new action in response to a non-real-time reaction, or to data from an
  // outside service.
  optional StartActionsRequestData start_actions_request = 12;

  // If specified, ICON tags all logs coming from parts used by this session
  // with this context.
  intrinsic_proto.data_logger.Context log_context = 11;

  reserved 10;
  reserved "start_action_instance_id";
}
// OpenSession() response.
message OpenSessionResponse {
  // Contains an aborted error if the session should end. May contain other
  // errors for non-session ending failures.
  google.rpc.Status status = 1;

  message InitialSessionData {
    // The unique identifier for the session. Callers can use this with related
    // requests to further interact with the session:
    // * GetStatus (to find the list of actions that exist in this session)
    // * WatchReactions
    // * OpenWriteStream
    // * GetLatestStreamingOutput
    // * GetPlannedTrajectory
    int64 session_id = 1;
  }

  // Contains information regarding session initialization. ICON sends this
  // *only* in response to the first request.
  InitialSessionData initial_session_data = 2;

  message ActionResponse {}

  oneof response_type {
    // This is a response to an ActionRequest
    ActionResponse action_response = 5;
  }
}

message WatchReactionsRequest {
  // The unique identifier of the action session. This should be the session id
  // returned in the `initial_session_data` of an OpenSession response.
  int64 session_id = 1;
}

message WatchReactionsResponse {
  // The time when the Reaction occurred.
  google.protobuf.Timestamp timestamp = 1;

  // The reaction that occurred. This is empty for the first message sent to the
  // client.
  ReactionEvent reaction_event = 2;
}

message AddStreamRequest {
  // The action this request is tied to.
  uint64 action_id = 1;

  // The name of the field.
  string field_name = 2;
}

// OpenWriteStream() request.
//
// In the initial message, the client must write `session_id` and
// `add_write_stream` to set up the stream.
//
// Subsequent calls must set the `write_value` field to send a value to the
// corresponding stream.
message OpenWriteStreamRequest {
  // Adds a write stream.
  // Callers must set this field *only* in the first message.
  AddStreamRequest add_write_stream = 1;

  // The ID of the session this stream belongs to.
  int64 session_id = 4;

  message WriteValue {
    google.protobuf.Any value = 2;
  }
  // The value to write to an already-set-up write stream.
  WriteValue write_value = 3;
}

message AddStreamResponse {
  google.rpc.Status status = 1;
}

message OpenWriteStreamResponse {
  // The response to AddStream requests.
  oneof stream_operation_response {
    AddStreamResponse add_stream_response = 1;
  }

  // If the previous message wrote a value, this field contains the status of
  // that write operation.
  //
  // Note that an OK status means that the value was *written* but does not
  // guarantee that the corresponding action has received or processed the
  // message.
  google.rpc.Status write_value_response = 2;
}

message EnableRequest {}
message EnableResponse {}

message DisableRequest {}
message DisableResponse {}

message ClearFaultsRequest {}
message ClearFaultsResponse {}

message GetOperationalStatusRequest {}
message GetOperationalStatusResponse {
  OperationalStatus operational_status = 1;
}

message GetLatestStreamingOutputRequest {
  // The ID of the session that the Action we're querying belongs to.
  int64 session_id = 1;
  // The action whose streaming output we're interested in.
  uint64 action_id = 2;
}

message GetLatestStreamingOutputResponse {
  StreamingOutput output = 1;
}

message GetPlannedTrajectoryRequest {
  // The ID of the session that the Action we're querying belongs to.
  int64 session_id = 1;
  // The action whose planned trajectory we're interested in.
  uint64 action_id = 2;
}

message GetPlannedTrajectoryResponse {
  intrinsic_proto.icon.JointTrajectoryPVA planned_trajectory_segment = 1;
}

message GetPartPropertiesRequest {}

// The value of a single part property. These can be scalar boolean or double
// values.
// If a part needs to expose more complex data as a property, it uses
// multiple values. You can read and write multiple values atomically using the
// GetPartProperties and SetPartProperties methods.
message PartPropertyValue {
  oneof value {
    bool bool_value = 1;
    double double_value = 2;
  }
}

// Contains the values of all part properties for a single part.
message PartPropertyValues {
  map<string, PartPropertyValue> property_values_by_name = 1;
}

message GetPartPropertiesResponse {
  // Control timestamp when the property values were collected. This differs
  // from wall time in two ways:
  // 1. The control timestamp is initialized to 0 on startup
  // 2. The control timestamp may advance slower or faster than wall time,
  //    especially in simulation.
  google.protobuf.Duration timestamp_control = 1;
  // Wall timestamp when the property values were collected. This is helpful for
  // cross-referencing with other Intrinsic services.
  google.protobuf.Timestamp timestamp_wall = 2;
  // These values are all from the same instant in time.
  map<string, PartPropertyValues> part_properties_by_part_name = 3;
}

message SetPartPropertiesRequest {
  // ICON applies all of these properties at the same time.
  map<string, PartPropertyValues> part_properties_by_part_name = 1;
}

message SetPartPropertiesResponse {}

message SetPayloadRequest {
  // The name of the part to set the payload for.
  string part_name = 1;
  // The name of the payload to set.
  string payload_name = 2;
  // The payload to set.
  world.RobotPayload payload = 3;
}

message SetPayloadResponse {}

message GetPayloadRequest {
  // The name of the part containing the payload.
  string part_name = 1;
  // The name of the payload.
  string payload_name = 2;
}

message GetPayloadResponse {
  // The payload. Empty if no payload is set.
  optional world.RobotPayload payload = 1;
}

service IconApi {
  // Gets details of an action type by name. The response's `action_signature`
  // field is unset if the requested action type is not found.
  rpc GetActionSignatureByName(GetActionSignatureByNameRequest)
      returns (GetActionSignatureByNameResponse);

  // Gets server configuration, including part-specific configuration info for
  // all parts (e.g. a robot arm might report its number of DOFs).
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  // Gets a snapshot of the server's status, including part-specific status info
  // for all parts. For instance, a robot arm might report its joint angles.
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);

  // Reports whether an action is compatible with a part or a group of parts.
  rpc IsActionCompatible(IsActionCompatibleRequest)
      returns (IsActionCompatibleResponse);

  // Lists details of all available action types.
  rpc ListActionSignatures(ListActionSignaturesRequest)
      returns (ListActionSignaturesResponse);

  // Lists all parts that are compatible with a list of action types. Each
  // returned part is compatible with all listed action types.
  // If the list of action types is empty, returns all parts.
  rpc ListCompatibleParts(ListCompatiblePartsRequest)
      returns (ListCompatiblePartsResponse);

  // Lists all available parts.
  rpc ListParts(ListPartsRequest) returns (ListPartsResponse);

  // Starts an action session. This is the main entrypoint into the ICON APIs.
  // ICON allows users to interact with a realtime control system using a few
  // key abstractions:
  // * Parts: Each part is a collection of sensors and actuators that form a
  //          logical unit. Each part offers a number of feature interfaces that
  //          Actions can interact with.
  //   Examples include:
  //   * A robot arm
  //   * A gripper
  //   * A laser rangefinder sensor
  // * Actions: An action is a building block of realtime control behavior. Each
  //   action has a number of "slots" that each connect to a feature interface
  //   on a part. Actions can also
  //   * accept zero or more streaming inputs (see `OpenWriteStream`)
  //   * publish a single optional streaming output (see
  //   `GetLatestStreamingOutput`)
  //   * report state variables, which can trigger reactions
  // * Reactions: Users can set up custom reactions that trigger based on the
  //   state variables of a running action. ICON evaluates reactions in hard
  //   realtime. That is, there is no delay between detecting that a reaction
  //   _should_ trigger and the desired effect.
  //   Reactions can affect the ICON server in several ways:
  //   * Notify gRPC clients of the reaction (see `WatchReactions` below).
  //   * Start a different action ("if the rangefinder reports a distance below
  //     0.1m, stop moving and close the gripper").
  //   * Trigger a signal on the running action, so that it can change its
  //     behavior.
  //
  // Each session can claim zero or more parts. A session without parts can not
  // run actions, but can still register reactions based on part status. Parts
  // claimed by one session are claimed until that session ends. Users can start
  // multiple sessions, but only one session can claim each part at a time.
  //
  // The parts that a session claims remain stopped until
  // * the user explicitly starts an action, or
  // * a reaction triggers the start of an action
  //
  // A new action session starts with only the actions in the initial
  // `OpenSessionRequest`.
  //
  // The client can signal the end of a session by indicating that writes are
  // done using the grpc::ClientReaderWriter (aka "half-closing" the stream).
  // ICON then ends the session and returns the final status. This includes
  // terminating any ongoing `WatchReactions` and `OpenWriteStream` calls for
  // the same session.
  //
  // If an action session ends for any reason, including the client or server
  // dropping the call, or a request to end the session, the server discards the
  // session, including all actions and reactions. This stops all parts
  // associated with the session and activates their safety actions.
  //
  // Publishes an `OpenSessionResponse` when
  // * ICON finishes processing an incoming `OpenSessionRequest`
  // * a reaction occurs
  rpc OpenSession(stream OpenSessionRequest)
      returns (stream OpenSessionResponse);

  // Opens a write stream for one action of a given session.
  //
  // Each write stream can send streaming input values to its action. Callers
  // can find information about the streaming inputs offered by an action by
  // calling `ListActionSignatures()` and inspecting the signature of an action
  // type.
  // The signature's `streaming_input_infos` field includes:
  // * The name of the input.
  // * A description that explains how the action reacts to input values.
  // * The proto message type name of the input.
  // * A FileDescriptorSet with detailed information about the input's message
  //   type, including all sub-messages. If the client does not have the
  //   information about the proto in question itself, it can use this
  //   FileDescriptorSet for introspection, and determine the structure of the
  //   proto message that way.
  //
  // Note that ICON may terminate an `OpenWriteStream` request if the
  // corresponding session ends for any reason (whether that is a server-side
  // error or the caller deliberately ending a session).
  rpc OpenWriteStream(stream OpenWriteStreamRequest)
      returns (stream OpenWriteStreamResponse);

  // Requests the latest streaming output value for a given action. Make sure to
  // set the gRPC deadline if you do not want the request to block for too long!
  //
  // Similar to streaming _inputs_ (see `OpenWriteStream()` above), callers
  // can find information about the streaming output (if any) offered by an
  // action by calling `ListActionSignatures()` and inspecting the signature of
  // an action type. The signature's `streaming_output_info` field includes:
  // * The name of the output.
  // * A description that explains when and how the action populates the output.
  // * The proto message type name of the output.
  // * A FileDescriptorSet with detailed information about the output's message
  //   type, including all sub-messages. If the client does not have the
  //   information about the proto in question itself, it can use this
  //   FileDescriptorSet for introspection, and determine the structure of the
  //   proto message that way.
  //
  // Blocks until the action writes the first streaming output (or the request
  // deadline expires), but returns an error immediately if the corresponding
  // action does not exist at all.
  rpc GetLatestStreamingOutput(GetLatestStreamingOutputRequest)
      returns (GetLatestStreamingOutputResponse);

  // Requests the planned trajectory for a given Action.
  // Returns a kFailedPrecondition if the requested Action/Session combination
  // does not exist, and a kNotFound one if there's no trajectory for an Action
  // existing in the given Session.
  rpc GetPlannedTrajectory(GetPlannedTrajectoryRequest)
      returns (stream GetPlannedTrajectoryResponse);

  // Watches reactions that occur during a particular action session.
  //
  // The server stops sending responses and ends the stream when the associated
  // action session ends.
  // One can only call `WatchReactions` while there is an active OpenSession
  // stream with the same session ID.
  //
  // When the server finishes setting up the reaction watcher, it sends a
  // single, empty WatchReactionsResponse to indicate readiness.
  //
  // There can be only one WatchReactions stream per session at a time.
  // Any additional WatchReactions requests return kUnavailable.
  rpc WatchReactions(WatchReactionsRequest)
      returns (stream WatchReactionsResponse);

  // Enables all parts on the server, which performs all steps
  // necessary to get the parts ready to receive commands.
  //
  // Deprecated. There is no need to call this – ICON automatically enables when
  // appropriate. While ICON is not enabled, callers cannot start sessions, and
  // the server terminates any sessions that were started when it was still
  // enabled.
  rpc Enable(EnableRequest) returns (EnableResponse) {
    option deprecated = true;
  }

  // Disables all parts on the server. Ends all currently-active sessions.
  //
  // Deprecated. Please file a bug if you encounter a situation where you must
  // forcibly end sessions that you do not own yourself.
  rpc Disable(DisableRequest) returns (DisableResponse) {
    option deprecated = true;
  }

  // Clears all faults. If successful, ICON automatically enables all parts
  // after this finishes.
  // Returns `OkStatus` if faults were successfully cleared.
  // Returns `ResourceExhausted` when a fatal fault is being cleared,
  // which is not completed yet and involves a process restart. In this case,
  // the client should retry until receiving `OkStatus`.
  rpc ClearFaults(ClearFaultsRequest) returns (ClearFaultsResponse);

  // Returns the operational status of the server.
  rpc GetOperationalStatus(GetOperationalStatusRequest)
      returns (GetOperationalStatusResponse);

  // Requests restarting the entire server.
  rpc RestartServer(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Updates the speed override value. The speed override factor must be between
  // 0 and 1. That is, no "fast-forward" or "rewind", but "pausing" with an
  // override factor of 0 is possible.
  //
  // The speed override value acts as a multiplier to the "nominal" velocity of
  // compatible actions. If an action is compatible, it will adjust its motion
  // (even during execution) accordingly when the speed override changes. For
  // example, setting a speed override value of 0.1 means that all compatible
  // actions move at 10% of their original velocity.
  //
  // Note that actions may not apply the new value instantaneously. This is
  // because instantaneous changes in velocity would violate acceleration and
  // jerk limits. Instead, actions will adjust their velocity as quickly as
  // allowed within the robot's limits.
  rpc SetSpeedOverride(SetSpeedOverrideRequest)
      returns (SetSpeedOverrideResponse);

  // Returns the current speed override value.
  rpc GetSpeedOverride(GetSpeedOverrideRequest)
      returns (GetSpeedOverrideResponse);

  // Configures the logging mode. The logging mode defines which robot-status
  // logs are logged to the cloud. ICON only logs to the cloud if a session is
  // active. Pubsub and local logging are not influenced by this setting.
  rpc SetLoggingMode(SetLoggingModeRequest) returns (SetLoggingModeResponse);

  // Returns the current logging mode.
  rpc GetLoggingMode(GetLoggingModeRequest) returns (GetLoggingModeResponse);

  // Returns the current values of all part properties.
  // Note that all values are collected at the same point in time.
  rpc GetPartProperties(GetPartPropertiesRequest)
      returns (GetPartPropertiesResponse);

  // Sets the part properties defined in the request. Use this to set parameters
  // on parts.
  // Guarantees that all values in the request are applied on the server at the
  // same time.
  rpc SetPartProperties(SetPartPropertiesRequest)
      returns (SetPartPropertiesResponse);

  // Sets a payload on a part. Fails if the part does not exist or the payload
  // contains invalid values.
  rpc SetPayload(SetPayloadRequest) returns (SetPayloadResponse) {}

  // Gets a payload stored in a part. Fails if the part does not exist or the
  // requested payload does not exist.
  rpc GetPayload(GetPayloadRequest) returns (GetPayloadResponse) {}
}
